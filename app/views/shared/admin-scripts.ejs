<!-- Right Sidebar -->
<div class="right-bar">
	<div data-simplebar class="h-100">
		<div class="rightbar-title px-3 py-4">
			<a href="javascript:void(0);" class="right-bar-toggle float-right"> <i class="bx bx-x font-size-24"></i> </a>
			<h5 class="m-0">Quick View</h5> </div>
		<!-- Settings -->
		<hr class="mt-0" />
		<div class="px-4 border-bottom">
			<div class="d-flex mb-2">
				<div class="align-self-center">                  

                    <% if(user_profile.avatar_path.startsWith('http')){  %>
                        <img class="rounded-circle avatar-md header-profile-user" data-src="<%= user_profile.avatar_path%>"
                        alt="">
                    <%}else{%>
                     <img class="rounded-circle avatar-md header-profile-user" data-src="<%= base_url %>/public/users/profile-image/<%= user_profile .user_code%>"
                     alt="">
                     <%}%> 

                </div>
				<div class="ml-2 w-100">
					<h5 class="mb-1">
            <a class="dynamic-link text-info"
              href="<%= base_url %>/user/profile"
              ><%= user_profile.first_name %> <%= user_profile.last_name %></a
            >
          </h5>
					<p class="text-muted mb-0">
						<%= user_profile.email_address %>
					</p>
					<div id="user-phone-info"></div>
				</div>
			</div>
		</div>
		<% if(user_profile.is_landlord){%>
			<div class="px-4 border-bottom">
				<h6 class="mt-2 p-1">
        SMS Units:
        <span id="available-sms-units" class="text-muted border shadow ml-2 p-1 pr-3 pl-3 bg-light btn btn-light"
          ><%= user_profile.available_sms_units%></span
        >
      </h6>
				<button id="btn-purchase-sms-units" type="button" class="btn btn-success btn-sm mb-3"> Purchase Units </button>
			</div>
			<%}%>
				<h6 class="text-center mb-0 mt-2">Quick Setup</h6>
				<div class="p-4">
					<% if(user_profile.phone_number && user_profile.phone_verified){%>
						<div class="custom-control custom-switch mb-3">
							<input type="checkbox" class="custom-control-input" id="light-mode-switch" />
							<label class="custom-control-label" for="light-mode-switch">2 Factor Authentication </label>
						</div>
						<%}%>
							<div class="custom-control custom-switch mb-3">
								<input type="checkbox" class="custom-control-input" id="dark-mode-switch" data-bsStyle="assets/css/bootstrap-dark.min.css" data-appStyle="assets/css/app-dark.min.css" />
								<label class="custom-control-label" for="dark-mode-switch">Single Device Login</label>
							</div>
				</div>
				<div class="w-100 border-top" style="position: fixed; bottom: 0; z-index:100; background-color:#fff">
					<div class="m-2">
						<p class="text-muted">Last Login:</p>
					</div>
				</div>
	</div>
	<!-- end slimscroll-menu-->
</div>
<!-- /Right-bar -->
<div class="rightbar-overlay"></div>
<div id="modal-get-phone-number" class="modal fade" tabindex="-1" role="dialog" aria-hidden="true">
	<div class="modal-dialog modal-dialog-centered modal-sm">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title mt-0">Enter your Phone Number</h5>
				<button type="button" class="close" data-dismiss="modal" aria-label="Close"> <span aria-hidden="true">&times;</span> </button>
			</div>
			<div class="modal-body">
				<input name="user-enter-phone-number" type="text" class="form-control" id="user-enter-phone-number" placeholder="eg O7XXXXXXXX" value="<%=user_profile.phone_number%>" maxlength="12" /> </div>
			<div class="modal-footer">
				<button data-dismiss="modal" class="btn btn-danger">Cancel</button>
				<button id="btn-link-user-phone" type="submit" class="btn btn-success mr-2"> Link Phone </button>
			</div>
		</div>
	</div>
</div>

<div id="modal-confirm-phone-number" class="modal fade" tabindex="-1" role="dialog" aria-hidden="true">
	<div class="modal-dialog modal-dialog-centered modal-sm">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title mt-0">Enter OTP</h5>
				<button type="button" class="close" data-dismiss="modal" aria-label="Close"> <span aria-hidden="true">&times;</span> </button>
			</div>
			<div class="modal-body">
				<button onclick="resendOtp()" class="btn btn-light mb-2"> Resend OTP </button>
				<input name="user-enter-otp-number" type="text" class="form-control" id="user-enter-otp-number" value="" maxlength="4" /> </div>
			<div class="modal-footer">
				<button data-dismiss="modal" class="btn btn-danger">Cancel</button>
				<button id="btn-link-otp-confirm" type="submit" class="btn btn-success mr-2"> Confirm </button>
			</div>
		</div>
	</div>
</div>

<div id="modal-purchase-sms-units" class="modal fade" tabindex="-1" role="dialog" aria-hidden="true">
	<div class="modal-dialog modal-dialog-centered modal-sm">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title mt-0">Purchase SMS Units</h5>
				<button type="button" class="close" data-dismiss="modal" aria-label="Close"> <span aria-hidden="true">&times;</span> </button>
			</div>
			<div class="modal-body">
				<div class="form-group mb-0">
					<label for="user-enter-sms-units">Number of SMS Units to purchase</label>
					<input name="user-enter-sms-units" type="number" class="form-control" id="user-enter-sms-units" min="10" />
					<label class="text-muted">1 SMS unit = 1 Ksh</label>
				</div>
				<div class="form-group mb-0 mt-0">
					<label for="user-enter-sms-units">Phone number to pay</label>
					<input name="user-enter-pay-phone" type="text" class="form-control" id="user-enter-pay-phone" placeholder="eg O7XXXXXXXX" value="<%=user_profile.phone_number%>" maxlength="12" /> </div>
			</div>
			<div class="modal-footer">
				<button data-dismiss="modal" class="btn btn-danger">Cancel</button>
				<button id="btn-sms-units-proceed" type="submit" class="btn btn-success mr-2"> Proceed </button>
			</div>
		</div>
	</div>
</div>

<div id="modal-change-current-property" class="modal fade" tabindex="-1" role="dialog" aria-hidden="true">
	<div class="modal-dialog modal-dialog-centered modal-sm">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title mt-0">Change Property</h5>
				<button type="button" class="close" data-dismiss="modal" aria-label="Close"> <span aria-hidden="true">&times;</span> </button>
			</div>
            <form method="post" action="#">
                <div class="modal-body">                   
                    <div class="form-group mb-0 mt-0">
                        <label>Working Property</label>
                        <select name='property_code' class='form-control'></select>                       
                    </div>
                </div>
                <div class="modal-footer">
                    <button data-dismiss="modal" class="btn btn-danger">Cancel</button>
                    <button type="submit" class="btn btn-success mr-2"> Change </button>
                </div>
            </form>			
		</div>
	</div>
</div>

<div id="modal-tour"  data-backdrop="static" class="modal fade" tabindex="-1" role="dialog" aria-hidden="true">
	<div class="modal-dialog modal-dialog-centered">
		<div class="modal-content">	
            <div class="modal-body">    
                <h4 class='text-center'>Welcome to Rent Hub.</h4>               
                <p>This is the number one platform for tenants, property owners, and agents. We are delighted for the bold step you've made by joining 1,000,000+ other users who find this platform helpful.</p>
                <p>Visit <a href='<%= base_url %>/support/help' class='dynamic-link'>Help Page</a> to find help on how to use this system. If you need more assistance, do not hesitate to <a href='<%= base_url %>/support/contacts' class='dynamic-link'>Contact Us</a> </p>
                <div class="text-center">                        
                    <button onclick="closeTour()" type="button" class="btn btn-primary"> Close </button>
                </div>
            </div> 
		</div>
	</div>
</div>

<div id="modal-property-owner" data-backdrop="static" class="modal fade" tabindex="-1" role="dialog" aria-hidden="true">
	<div class="modal-dialog modal-dialog-centered">
		<div class="modal-content">	
            <div class="modal-body">    
                <h4 class='text-center'>Are you a property owner?</h4>               
                <p>We present an ideal platfom for platform owners to manage their properties with an easy. Access all features in one place and take business to another level.</p>
                <p>Visit <a href='<%= base_url %>/support/help' class='dynamic-link'>Help Page</a> to find help on how to use this system. If you need more assistance, do not hesitate to <a href='<%= base_url %>/support/contacts' class='dynamic-link'>Contact Us</a> </p>
                <div class="text-center">    
                    <button onclick="landlordPrompt(0,0)" type="button" class="btn btn-warning mx-2"> I am tenant </button>

                    <button onclick="landlordPrompt(1,0)" type="button" class="btn btn-primary mx-2"> I am a property owner </button>
                </div>
            </div> 
		</div>
	</div>
</div>

<script src="<%= base_url %>/assets/js/jquery.min.js?v=010101"></script>
<script src="<%= base_url %>/assets/js/bundle.js?id=125014685" defer></script>

<!-- <script src="<%= base_url %>/assets/js/socket.io.min" defer></script> -->
<script>
var loading_div = '<div class="row d-flex justify-content-center"> <div class="spinner-grow text-success m-1" role="status"> <span class="sr-only">Loading...</span> </div> </div>';
var session_modal = '<div class="modal fade" id="session-timeout-dialog" data-backdrop="static" tabindex="-1" role="dialog"  aria-hidden="true"><div class="modal-dialog" role="modal"> <div class="modal-content"> <div class="modal-header"> <h5 class="modal-title">Session Expiring</h5></div> <div class="modal-body"> <p>Due to inactivity, your session is about to expire. If you need more time, click on the \'Stay Connected\' button below.</p><p>You session will be locked in <span id="session-remaining-seconds" class="text-danger">30</span> seconds</p></div> <div class="modal-footer"> <button id="session-timeout-dialog-logout" onclick="window.location.href = \'<%=base_url %>/auth/logout\'" type="button" class="btn btn-danger">Logout</button><button id="session-timeout-dialog-keepalive" onclick="resetLogoutTimer()" type="button" class="btn btn-info" data-dismiss="modal">Stay Connected</button></div> </div> </div> </div>';
var csrf_token = document.querySelector('meta[name="csrf-token"]').getAttribute("content");
var base_url = "<%= base_url %>";
var genders = ["Male", "Female", "Other"];
var row_begin = '<div class="btn-group dropleft"> <button type="button" class="btn btn-sm btn-light dropdown-toggle pt-2" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"> <i class="bx bx-dots-horizontal-rounded font-size-16"></i> </button> <div class="dropdown-menu">';
var row_end = "</div> </div>";
var monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
var edit_links = "<a href='javascript:void(0)' class='bEdit dropdown-item text-info' onclick='rowEdit(this);'>Quick Edit</a> <a href='javascript:void(0)' class='bElim dropdown-item text-danger' onclick='rowElim(this);'>Delete</a> <a href='javascript:void(0)' class='bAcep dropdown-item text-success'  onclick='rowAcep(this);' style='display:none;'>Save Changes</a> <a href='javascript:void(0)' class='bCanc dropdown-item text-danger'  onclick='rowCancel(this);' style='display:none;'>Cancel Changes </a>";
var prop_types = ["Residential", "Business-Stalls", "Business-Offices", "Mixed"];
var unit_types = ["Single Rooms", "Bedsitters", "One Bedrooms", "Two Bedrooms", "Three Bedrooms", "Four Bedrooms", "Mixed", "Others"];
var page_error = '<div style="height:calc(100vh - 160px)"> <div class="d-flex align-items-center justify-content-center"> <div class="error-template" style="position: absolute; top: 50%; transform: translate(0, -50%);"> <h1> Oops!</h1> <h2> An Error Occured!</h2> <div class="error-details"> An error has occured while fetching the requested page. Make sure you have an active internet connection then click on the refresh button below to give it another shot </div> <div class="error-actions"> <a href="javascript:void(0)" class="btn btn-danger  mt-2" onclick="reloadPage()"> Refresh </a> </div> </div> </div> </div>';

var is_landlord = '<%= user_profile.is_landlord%>';
var landlord_prompted = '<%= user_profile.landlord_prompted%>';
var tour_prompted = '<%= user_profile.tour_prompted%>';

localStorage.openpages = Date.now();
var onLocalStorageEvent = function(e){
  if(e.key == "openpages"){   
    localStorage.page_available = Date.now();
  }
  if(e.key == "page_available"){
    //alert("One more page already open");
  }
};
window.addEventListener('storage', onLocalStorageEvent, false);
var idle_time = 0;
var sessionTimer;
<% if(user_profile.password_set){%>
    sessionTimer = setInterval(() => {
    checkActivity();
}, 1000);
<%}%>

var logoutTimer;
var remainingSeconds;
var last_note = 0;
var unread_notes = 0;
var is_loading_more_notes = false;
var last_notification_fetch_time = new Date(Date.now() - 30000);
var session_locked = false;
var obj = {
    Title: window.title,
    Url: location.href,
};

window.history.pushState(obj, obj.Title, obj.Url);

function formatMoney(number) {
    var n = parseFloat(number) || 0;
    
    return Number(n).toLocaleString(undefined, {
        minimumFractionDigits: 2,
        maximumFractionDigits: 2
    });
}

function showTour() {
  setTimeout(
    function() {
        if(tour_prompted=='0'){
            $('#modal-tour').modal('show');
        }else{
            promptLandlord();
        }      
    }, 3000);
}

function promptLandlord(){   
    setTimeout(
    function() {
        if(landlord_prompted=='0'){
            $('#modal-property-owner').modal('show');
        }      
    }, 1000);
}

function closeTour(){
    $('#modal-tour').modal('hide');
    $.ajax({
        type: "POST",
        async: true,
        credentials: "same-origin",
        headers: {
            "CSRF-Token": csrf_token,
        },
        url: "<%= base_url %>/user/close-tour",       
        success: function (data) { 
               
        },
    });
    promptLandlord();      
}

function landlordPrompt(val=0, l=0){
    $('#modal-property-owner').modal('hide');
    $.ajax({
        type: "POST",
        async: true,
        credentials: "same-origin",
        headers: {
            "CSRF-Token": csrf_token,
        },
        data:{sub:val},
        url: "<%= base_url %>/user/prompt-landlord",       
        success: function (data) { 
            if(val){
                if(data.Status == 200){
                    showAppNotification( 'success', 'Thanks for showing interest to work with as a property owner. Your request has been received. We shall contact you shortly!'); 
                    if(l){
                        setTimeout(
                            function() {
                            window.location.reload();
                        }, 3000);
                    }
                }else{
                    showAppNotification( 'warning', 'Thanks for showing interest to work with as a property owner. We regret that your request has not been completed.\n' + data.Message);
                }
            }
        },
        error: function(err) { 
            if(val){
                showAppNotification( 'danger', 'Unable to complete your request. Please try again later!'); 
            }  
        }
    });
}


function formDeserialize(form_id, data) {    
    let keys = Object.keys(data); 
    let inputs = [];
    $("#" + form_id).each(function () {      
        inputs = $(this).find(':input');
    });  
    for (let i = 0; i < inputs.length; i++) {
        let iname = inputs[i].name;
        let $elem = inputs[i];
        if (keys.includes(iname)) {
            switch (inputs[i].type) {
                case 'date':
                    $elem.value = timestampToDate(new Date(data[iname]));
                    break;
                case 'checkbox':
                    if (data[iname]) {
                        $elem.checked = true;
                        $elem.value=1;
                    }else{
                        $elem.checked = false;  
                    }
                    break;
                case 'select-one':
                    $elem.value = data[iname];
                   
                    if ($elem.className.includes('selectpicker-select')) {
                        $(".selectpicker-select").selectpicker("refresh");
                    }
                    break;
                case 'select-multiple':                  
                    $(`#${form_id} select[name="${$elem.name}"]`).val(data[iname].split(','));
                    if ($elem.className.includes('selectpicker-select') || $elem.className.includes('selectpicker')) {
                        //$elem.selectpicker("refresh");
                       // $('.selectpicker-select').selectpicker('val', data[iname].split(','));
                    }
                    break;
                case 'radio':                  
                    $(`#${form_id} input[name="${$elem.name}"][value="${data[iname]}"]`).prop('checked', true);
                    break;
                default:  
                    $elem.value = data[iname];
            }

        }
    }
}

function myFormData(form) {
    let data = {};
    $(form).find('input, textarea, select').each(function(x, field) {        
        if (field.name) {
            if(field.multiple){
                if(field.value){
                    data[field.name]= $(form).find('select[name="' + field.name + '"]').val().join(',');
                }else{
                    data[field.name] = null;
                }
            }else{
                if(field.type=='radio'){                    
                    data[field.name] =  $(form).find('input[type="radio"][name="' + field.name + '"]:checked').val();
                }else{
                    data[field.name] = field.value;
                }                
            }
        }
    });
    return data
}

window.addEventListener("load", function () {
    setTimeout(function () {
        window.addEventListener("popstate", function () {
            if (history.state !== null || history.state !== undefined) {
                if (history.state.Url) {
                    loadPage(history.state.Url, false);                       
                }
            }
        });
    }, 0);
});

$(document).on("click", "#app-notifications .notification-item", function (e) {
    e.stopPropagation();   
    var note_read = this.getAttribute("note-read");
    var note_id = this.getAttribute("note-id");
    var link = this.getAttribute("hyper-link");
    var target = $(this).find(".note-header");
    if (note_read === "0") {
        $.ajax({
            type: "POST",
            async: true,
            credentials: "same-origin",
            headers: {
                "CSRF-Token": csrf_token,
            },
            url: "<%= base_url %>/user/read-notification",
            data: "note_id=" + note_id,
            success: function (data) {
                if (data.Status == 200) {
                    target.removeClass("font-weight-bold");
                    target.removeClass("text-primary");
                    if (unread_notes > 0) {
                        unread_notes -= 1;
                    }
                    setUnreadNotes(unread_notes);
                }
            },
        });
    }
    if (link !== "null" && link !== undefined && link !== "") {
        window.location.href = link;
    }
});

$(document).on("click", ".dynamic-link", function (e) {
    e.preventDefault();
        e.stopImmediatePropagation();
        loadPage($(this).attr("href"), true);
        return false;
});

$(document).on("keyup mouseup mousemove touchend touchmove", function (b) {
    idle_time = 0;
});

$(document).on("click", "body", function (e) {
    0 < $(e.target).closest(".right-bar-toggle, .right-bar").length || $("body").removeClass("right-bar-enabled");
});

function setWorkingProperty(){
    $.ajax({
        type: "POST",
        async: true,
        credentials: "same-origin",
        headers: {
            "CSRF-Token": csrf_token,
        },
        url: "<%= base_url %>/admin/properties/list",     
        success: function (data) {
            if (data.Status == 200) {
                let list = data.Message;
                var options = [];   
                for(var i = 0; i < list.length; i++){
                    if('<%= current_property_code%>' == list[i].property_code){
                        options.push('<option selected="selected" value="',
                        list[i].property_code, '">',
                        list[i].property_name, '</option>');
                    }else{
                        options.push('<option value="',
                        list[i].property_code, '">',
                        list[i].property_name, '</option>');
                    }
                    $("#modal-change-current-property select").html(options.join(''));
                    $("#modal-change-current-property").modal('show');
                }
            } else {
                showAppNotification("warning", data.Message);
            }
        },
        error: function (err) {           
            showAppNotification("danger", "An error occured. Please try again later");
        },
    });
}

$("#modal-change-current-property form").on("submit", function(e) {  
    e.preventDefault();
    var data = new myFormData($(this)); 
    $("#modal-change-current-property button[type='submit']").prop("disabled", true)
    $.ajax({
        type: "POST",
        async: true,  
        credentials: 'same-origin', headers: {'CSRF-Token': csrf_token},
        url: "<%= base_url %>/manage/working-property",
        data: data,
        success: function(data) {
            if (data.Status == 200) {                       
                window.location.reload();                  
            } else {                
                $("#modal-change-current-property button[type='submit']").prop("disabled", false)
                showAppNotification('warning', data.Message);
            }
        },
        error: function(err) { 
            $("#modal-change-current-property button[type='submit']").prop("disabled", false)
            showAppNotification( 'danger', 'Unable to complete your request. Please try again later!');
        }
    });          
});

$(document).ready(function () {
    $.extend(true, $.fn.dataTable.defaults.oLanguage.oPaginate, {
        sNext: '<i class="bx bxs-chevron-right"></i>',
        sPrevious: '<i class="bx bxs-chevron-left"></i>',
    });

    var layout_wrapper = document.getElementById("layout-wrapper");
   // new SimpleBar(layout_wrapper, {autoHide: false});

    initDeferImages();
    resetMenus(); 
    showTour();

    $("#available-sms-units").on("click", function (e){
        getSmsUnitsBalance();
    });

    $("#btn-sms-units-proceed").on("click", function (e) {
        var sms_units = parseInt($("#user-enter-sms-units").val());
        var sms_phone = $("#user-enter-pay-phone").val();

        if (sms_units > 9) {
            if (sms_phone.length == 10 || sms_phone.length == 12) {
                $("#modal-purchase-sms-units").modal("hide");
                $.ajax({
                    type: "POST",
                    async: true,
                    credentials: "same-origin",
                    headers: {
                        "CSRF-Token": csrf_token,
                    },
                    url: "<%= base_url %>/user/profile?section=purchase-sms-units",
                    data: { phone_number: sms_phone, units: sms_units },
                    success: function (data) {
                        if (data.Status == 200) {
                            showAppNotification("success", data.Message);
                        } else {
                            showAppNotification("warning", data.Message);
                        }
                    },
                    error: function (err) {
                        $("#modal-purchase-sms-units").modal("show");
                        showAppNotification("danger", "An error occured. Please try again later");
                    },
                });
            } else {
                showAppNotification("warning", "Please enter a correct phone number ie 07XXXXXXXX or 2547XXXXXXXX!");
            }
        } else {
            showAppNotification("warning", "Minimum SMS units to purchase are 10!");
        }
    });

    $(".verify-profile-phone").on("click", function (e) {
        verifyPhoneOtp();
    });

    $(".link-profile-phone").on("click", function (e) {
        linkPhone();
    });

    $("#btn-purchase-sms-units").on("click", function (e) {
        $("body").removeClass("right-bar-enabled");
        $("#modal-purchase-sms-units").modal("show");
    });

    $("#btn-link-otp-confirm").on("click", function (e) {
        const otp = $("#user-enter-otp-number").val();
        if (otp.length == 4) {
            $("#btn-link-otp-confirm").html("Please wait..");
            $("#btn-link-otp-confirm").attr("disabled", true);
            $.ajax({
                type: "POST",
                async: true,
                credentials: "same-origin",
                headers: {
                    "CSRF-Token": csrf_token,
                },
                url: "<%= base_url %>/user/profile?section=confirm-otp",
                data: { otp: otp },
                success: function (data) {
                    $("#btn-link-otp-confirm").html("Confirm");
                    $("#btn-link-otp-confirm").attr("disabled", false);
                    if (data.Status == 200) {
                        $("#modal-confirm-phone-number").modal("hide");
                        showAppNotification("success", data.Message);
                        getUserPhoneInfo();                         
                    } else {
                        showAppNotification("warning", data.Message);
                    }
                },
                error: function (err) {
                    $("#btn-link-otp-confirm").html("Confirm");
                    $("#btn-link-otp-confirm").attr("disabled", false);
                    showAppNotification("danger", "An error occured. Please try again later");
                },
            });
        } else {
            showAppNotification("warning", "The provided OTP is invalid.");
        }
    });

    $("#btn-link-user-phone").on("click", function (e) {
        $("#modal-get-phone-number").modal("hide");
        var phone_number = $("#user-enter-phone-number").val();
        $.ajax({
            type: "POST",
            async: true,
            credentials: "same-origin",
            headers: {
                "CSRF-Token": csrf_token,
            },
            url: "<%= base_url %>/user/profile?section=update-phone",
            data: { phone_number: phone_number },
            success: function (data) {
                if (data.Status == 200) {
                    var res = data.Message;
                    if (res.phone_updated) {
                        showAppNotification("info", res.message);  
                        getUserPhoneInfo();                      
                        verifyPhoneOtp();                        
                    } else {
                        showAppNotification("warning", res.message);
                    }
                } else {
                    showAppNotification("warning", data.Message);
                    $("#modal-get-phone-number").modal("show");
                }
            },
            error: function (err) {
                showAppNotification("danger", "An error occured. Please try again later");
            },
        });
    });
  
    $("#overlay-image-modal").on("click", function (e) {
        if (e.target.id == "overlay-close-button" || e.target.id == "overlay-image-modal") {
            $("#overlay-image-modal").css("display", "none");
        }
    });

    $("#close-side-menu, .page-content, #page-header-notifications-dropdown, #page-header-user-dropdown, .right-bar-toggle").click(function () {
        $("body").removeClass("sidebar-enable");
    });

    $("#user-profile-link").click(function () {
        loadPage("<%= base_url %>/user/profile", true);
    });

    $("#user-chats-link").click(function () {
        loadPage("<%= base_url %>/user/chats", true);
    });

    $("#landlord-button").click(function () {
        $.ajax({
            type: "POST",
            async: true,
            credentials: "same-origin",
            headers: {
                "CSRF-Token": csrf_token,
            },
            url: "<%= base_url %>/user/toggle-landlord",
            data: "",
            success: function (data) {
                if (data.Status == 200) {
                    window.location.replace("<%= base_url %>");
                } else {
                    showAppNotification("warning", data.Message);
                }
            },
            error: function (err) {
                showAppNotification( 'danger', 'Unable to complete your request. Please try again later!');
            },
        });
    });

    $("#side-menu").metisMenu();
    toggleSideBar();
    $(".dropdown-menu a.dropdown-toggle").on("click", function (e) {
        return $(this).next().hasClass("show") || $(this).parents(".dropdown-menu").first().find(".show").removeClass("show"), $(this).next(".dropdown-menu").toggleClass("show"), !1;
    });

    $("#vertical-menu-btn").on("click", function (e) {
        e.preventDefault(), $("body").toggleClass("sidebar-enable"), 992 <= $(window).width() ? $("body").toggleClass("vertical-collpsed") : $("body").removeClass("vertical-collpsed");
        if (typeof Storage != "undefined") {
            localStorage.setItem("toggleState", $("body").hasClass("vertical-collpsed"));
        }
    });   

    document.getElementById("overlay-image-modal").addEventListener("wheel", zoomRequested, {passive: true});
    document.addEventListener("fullscreenchange", fullScreenToggle());
    document.addEventListener("webkitfullscreenchange", fullScreenToggle());
    document.addEventListener("mozfullscreenchange", fullScreenToggle());

    $('[data-toggle="fullscreen"]').on("click", function (e) {
        e.preventDefault(), $("body").toggleClass("fullscreen-enable"), document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement ? (document.cancelFullScreen ? document.cancelFullScreen() : document.mozCancelFullScreen ? document.mozCancelFullScreen() : document.webkitCancelFullScreen && document.webkitCancelFullScreen()) : document.documentElement.requestFullscreen ? document.documentElement.requestFullscreen() : document.documentElement.mozRequestFullScreen ? document.documentElement.mozRequestFullScreen() : document.documentElement.webkitRequestFullscreen && document.documentElement.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
    });

    $("#read-all-notes").click(function (e) {
        //e.preventDefault();
        //e.stopPropagation();
        $.ajax({
            type: "POST",
            async: true,
            credentials: "same-origin",
            headers: {
                "CSRF-Token": csrf_token,
            },
            url: "<%= base_url %>/user/read-all-notifications",
            data: "",
            success: function (data) {
                if (data.Status == 200) {
                    $("#note-inner")
                        .find(".note-header")
                        .each(function () {
                            $(this).removeClass("font-weight-bold");
                            $(this).removeClass("text-primary");
                        });

                    $("#all-notification-body")
                        .find(".note-header")
                        .each(function () {
                            $(this).removeClass("font-weight-bold");
                            $(this).removeClass("text-primary");
                        });
                    unread_notes = 0;
                    setUnreadNotes(0);
                }
            },
        });
    });

    $(".right-bar-toggle").on("click", function (e) {
        $("body").toggleClass("right-bar-enabled");
    });

    $("#notifications-container .simplebar-content-wrapper").scroll(function (e) {
        if ($(this).scrollTop() + $(this).innerHeight() >= $(this)[0].scrollHeight) {            
            if(is_loading_more_notes){return;}
            var last_note = $("#note-inner").children().last().attr("note-id");          
            is_loading_more_notes = true;
            $("#load-more-notifications").css("display", "flex").hide().fadeIn();
            setTimeout(function () {
                loadMoreNotifications(last_note);
            }, 1000);
        }
    });

    $("#view-all-notifications").on("click", function (e) {
        loadPage("<%= base_url %>/user/notifications", true);
    });

    loadNotifications();
    getUnreadNotifications();
    getUserPhoneInfo();
    setInterval(function () {
        refreshNotificationTime();
    }, 30000);
  
        setInterval(function() {
            getSmsUnitsBalance();
        }, 300000);
    

    setTimeout(function() {
        requestDesktopNotificationsAccess();
    }, 10000);

   
    // const spusher = io();
    // spusher.on("<%- user_profile.user_code%>", function (data) {
    //     var time_now = new Date();
    //     var seconds = (time_now.getTime() - last_notification_fetch_time.getTime()) / 1000;
    //     if (seconds > 30) {
    //         getUnreadNotifications();
    //         refreshNotifications();
    //     }   
    //     showAppNotification(data.class, data.message);
    // });
    
    loadBoxIcons();
    getPendingTerminations();
});

function loadBoxIcons(){
    if(document.createStyleSheet) {
        document.createStyleSheet('<%= base_url %>/assets/css/boxicons.min.css');
    }else {
        var styles = "@import url('<%= base_url %>/assets/css/boxicons.min.css');";
        var newSS=document.createElement('link');
        newSS.rel='stylesheet';
        newSS.href='data:text/css,'+escape(styles);
        document.getElementsByTagName("head")[0].appendChild(newSS);
    }
}

function getUserPhoneInfo(){
    $.ajax({
        type: "POST",
        async: true,
        credentials: "same-origin",
        headers: {
            "CSRF-Token": csrf_token,
        },
        url: "<%= base_url %>/user/user-phone-info",
        data: {},
        success: function (data) {
            if(data.Status == 200){
                $("#user-phone-info").html(data.Message);
            }            
        },
    });
}

function showNotification() {
   const notification = new Notification("New message incoming", {
      body: "Hi there. How are you doing?",
      icon: "yourimageurl.png"
   })
}

function requestDesktopNotificationsAccess(){
    if (Notification.permission === "granted") {
        //showNotification();
   } else if (Notification.permission !== "denied") {
      Notification.requestPermission().then(permission => {
         if(permission=="granted") {
            //showNotification();
         }
      });
   }
}

function reloadPage() {
    location.reload();
}

function resetSessionTimer() {
    clearInterval(sessionTimer);
}

function resetLogoutTimer() {
    sessionTimer = setInterval(() => {
        checkActivity();
    }, 1000);

    clearInterval(logoutTimer);
}

function linkPhone() {
    $("body").removeClass("right-bar-enabled");
    $("#user-enter-phone-number").focus();
    $("#modal-get-phone-number").modal("show");
}

function verifyPhoneOtp() {
    $("body").removeClass("right-bar-enabled");
    $("#modal-confirm-phone-number").modal("show");
}

function resendOtp() {
    $.ajax({
        type: "POST",
        async: true,
        credentials: "same-origin",
        headers: {
            "CSRF-Token": csrf_token,
        },
        url: "<%= base_url %>/user/profile?section=resend-otp",
        data: {},
        success: function (data) {
            if (data.Status == 200) {
                showAppNotification("success", data.Message);
            } else {
                showAppNotification("warning", data.Message);
            }
        },
        error: function (err) {
            showAppNotification("danger", "An error occured. Please try again later");
        },
    });
}

function sessionLogout() {
    if(session_locked) return;
    remainingSeconds--;
    $("#session-remaining-seconds").html(remainingSeconds);
    if (remainingSeconds === 0) {
        clearInterval(logoutTimer);
        lockUserSession();      
    }
}

function lockUserSession() {
    $.ajax({
        type: "POST",
        async: true,
        credentials: "same-origin",
        headers: {
            "CSRF-Token": csrf_token,
        },
        url: "<%= base_url %>/user/profile?section=lock-user",
        data: {},
        success: function (data) {
            if(data.Status == 200){
                session_locked = true;                
                $(".modal").modal("hide");
                $("body").removeClass("right-bar-enabled")
                loadPage(window.location.href, false);
            }          
        },
    });
}

function checkActivity() {
    if(session_locked) return;
    idle_time++;
    if (idle_time >= 600) {
        resetSessionTimer();
        var modal_available = document.getElementById("session-timeout-dialog");
        if (!modal_available) {
            $("body").prepend(session_modal);
        }
        $("#session-timeout-dialog").modal("show");
        remainingSeconds = 30;
        logoutTimer = setInterval(() => {
            sessionLogout();
        }, 1000);
    }
}

function intitImagePopup(e) {
    var src = $(e).attr("src");
    $("#overlay-image").attr("src", src);

    if (e.title) {
        $("#overlay-image-caption").html(e.title);
        $("#overlay-image-caption").css("display", "block");
    } else {
        $("#overlay-image-caption").css("display", "none");
    }
    $("#overlay-image-modal").css("display", "flex");
}

function zoomRequested(e) {
    var h = $("#overlay-image").height();
    var step = 50; //zoomStep(h);
    if (e.deltaY > 0) {
        $("#overlay-image").height(h - step);
    } else {
        $("#overlay-image").height(h + step);
    }
}

function insertField(e) {
    $("#sms_template").insertAtCaret($(e).attr("data-sms"));
}

function toggleSideBar() {
    var e;
    0 < $("#sidebar-menu").length &&
        0 < $("#sidebar-menu .mm-active .active").length &&
        300 < (e = $("#sidebar-menu .mm-active .active").offset().top) &&
        ((e -= 300),
        $(".simplebar-content-wrapper").animate(
            {
                scrollTop: e,
            },
            "slow"
        ));
    if (typeof Storage != "undefined") {
        var collapsed = localStorage.getItem("toggleState");
        if (collapsed == "true") {
            $("body").addClass("vertical-collpsed");
        }
    }
}

function fullScreenToggle() {
    document.webkitIsFullScreen || document.mozFullScreen || document.msFullscreenElement || $("body").removeClass("fullscreen-enable");
}

function showPopOver(e) {
    $(e).popover({
        placement: "top",
        trigger: "hover",
    });

    $(e).popover("show");
}

function initDeferImages() {
    var deferImages = document.querySelectorAll("img[data-src]");
    deferImages = document.querySelectorAll("[data-src]");
    LoadImage(deferImages, swapSrcAttributes("data-src"));
}

function todaysDate() {
    var now = new Date();
    var day = ("0" + now.getDate()).slice(-2);
    var month = ("0" + (now.getMonth() + 1)).slice(-2);
    return now.getFullYear()+"-"+(month)+"-"+(day) ;     
}

function loadMoreNotifications(last_id) {   
    $.ajax({
        type: "POST",
        async: true,
        credentials: "same-origin",
        headers: {
            "CSRF-Token": csrf_token,
        },
        url: "<%= base_url %>/user/get-more-notifications",
        data: { last_note: last_id },
        success: function (data) {
            is_loading_more_notes = false;
            $("#load-more-notifications").css("display", "none").hide().fadeOut();
            if (data.data === undefined) {
                return false;
            }
            var notes = data.data;
            if (notes.length > 0) {
                for (var i = 0; i < notes.length; i++) {
                    var notification = notificationObjectMessage(notes[i]);
                    $("#note-inner").append(notification);
                }
            }else{                
                var $cont = $("#notifications-container .simplebar-content-wrapper");
                $cont.scrollTop($cont.scrollTop() - 20);   
            }
        },
        error: function (err) {
            is_loading_more_notes = false;
            $("#load-more-notifications").css("display", "none").hide().fadeOut();
        },
    });
}

function getUnreadNotifications() {
    $.ajax({
        type: "POST",
        async: true,
        credentials: "same-origin",
        headers: {
            "CSRF-Token": csrf_token,
        },
        url: "<%= base_url %>/user/get-unread-notifications",
        data: "",
        success: function (data) {            
            if (data.Message) {
                unread_notes = data.Message.unread_notes;
                setUnreadNotes(unread_notes);
            }
        },
    });
}

function swapSrcAttributes(source) {
    return function (element) {
        element.setAttribute("src", element.getAttribute(source));
    };
}

function LoadImage(collection, partial) {
    for (var i = 0; i < collection.length; i++) {
        partial(collection[i]);
    }
}

function scrollToTop(){
    $("#layout-wrapper").animate(
        {
            scrollTop: 0,
        },
        "normal"
    );
}

function loadPage(target, savePushState) {
    var h = $(window).height();
    h -= 150;
    $(".modal").modal("hide");
    $("body").removeClass("sidebar-enable");
    //$(".load-bar").show();
    makeBusy('.page-content');

    $("#overlay-image").animate(
        {
            opacity: 1,
        },
        "normal"
    );

    $.ajax({
        url: target,
        async: true,
        cache:false,
        success: function (data) {
            $(".page-content").animate(
                {
                    opacity: 0,
                },
                100,
                function () {
                    $(this)
                        .html(data)
                        .animate(
                            {
                                opacity: 1,
                            },
                            200,
                            function () {
                                var newTitle = "Rent Hub";
                                if ($("#page-title").html() !== undefined) {
                                    newTitle += " - " + $("#page-title").html();
                                }
                                document.title = newTitle;
                                if (savePushState) {
                                    var obj = {
                                        Title: newTitle,
                                        Url: target,
                                    };
                                    window.history.pushState(obj, obj.Title, obj.Url);
                                }
                                //$(".load-bar").hide();
                                makeBusy('.page-content',0);    
                                resetMenus();                              
                                scrollToTop();
                            }
                        );
                }
            );
        },
        error: function (err) {   
            //$(".load-bar").hide();    
            makeBusy('.page-content',0);    
            if(err.status==404){
                $(".page-content").html(err.responseText);
            }else{
                $(".page-content").html(page_error);
            }
            if (savePushState) {
                var obj = {
                    Title: "Rent Hub",
                    Url: target,
                };
                window.history.pushState(obj, obj.Title, obj.Url);
            } 
            scrollToTop();
            resetMenus();
        },
    });
}

function resetMenus() {
    $("#sidebar-menu a").each(function () {
        $(this).removeClass("active");
        $(this).parent().removeClass("mm-active");
        $(this).parent().parent().removeClass("mm-show");
        $(this).parent().parent().prev().removeClass("mm-active");
        $(this).parent().parent().parent().removeClass("mm-active");
        $(this).parent().parent().parent().parent().removeClass("mm-show");
        $(this).parent().parent().parent().parent().parent().removeClass("mm-active");
    });
    chooseMenus();
}

function chooseMenus() {
    $("#sidebar-menu a").each(function () {
        var pageUrl = window.location.href.split(/[?#]/)[0];
        if (this.href == pageUrl || pageUrl.includes(this.href)) {
            $(this).addClass("active");
            $(this).parent().addClass("mm-active");
            $(this).parent().parent().addClass("mm-show");
            $(this).parent().parent().prev().addClass("mm-active");
            $(this).parent().parent().parent().addClass("mm-active");
            $(this).parent().parent().parent().parent().addClass("mm-show");
            $(this).parent().parent().parent().parent().parent().addClass("mm-active");
        }
    });
}

function showAppNotification(a, e) {
    switch (a) {
        case "danger":
            iziToast.error({
                class: "popup-notification",
                timeout: 8000,
                maxWidth: 300,
                progressBar: false,
                position:	'bottomRight',
                message: e,
            });
            break;
        case "warning":
            iziToast.warning({
                class: "popup-notification",
                timeout: 8000,
                maxWidth: 300,
                progressBar: false,
                position:	'bottomRight',
                message: e,
            });
            break;
        case "info":
            iziToast.info({
                class: "popup-notification",
                timeout: 8000,
                maxWidth: 300,
                progressBar: false,
                position:	'bottomRight',
                message: e,
            });
            break;
        case "success":
            iziToast.success({
                class: "popup-notification",
                timeout: 8000,
                maxWidth: 300,
                progressBar: false,
                position:	'bottomRight',
                message: e,
            });
            break;
        default:
            iziToast.info({
                class: "popup-notification",
                timeout: 8000,
                progressBar: false,
                position:	'bottomRight',
                message: e,
            });
    }
}

function setUnreadNotes(notes) {
    unread_notes = notes;
    if (unread_notes > 0) {
        var note_label = unread_notes.toString();
        if (unread_notes > 9) {
            note_label = "9+";
        }
        $("#page-header-notifications-dropdown").html('<i class="bx bx-bell bx-tada"></i><span class="badge badge-danger badge-pill">' + note_label + "</span>");
    } else {
        $("#page-header-notifications-dropdown").html('<i class="bx bx-bell"></i>');
    }
}

function refreshNotificationTime() {
    $("#note-inner")
        .find(".notification-time")
        .each(function () {
            $(this).html(timeDifference(new Date($(this).attr("note-time"))));
        });
}

function downloadPdfInvoice(invoice_url) {
    var filename = "INVOICE.pdf";
    showAppNotification("info", "Your request has been sent. This can take few seconds.");
    fetch(invoice_url)
        .then((resp) => {
            filename = resp.headers.get("filename");
            return resp.blob();
        })
        .then((blob) => {
            if (blob.type == "application/pdf") {
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement("a");
                a.style.display = "none";
                a.href = url;
                a.download = filename;
                document.body.appendChild(a);
                a.click();
                window.URL.revokeObjectURL(url);
                showAppNotification("success", "Invoice file has been generated");
            } else {
                showAppNotification("danger", "Unable to generate the file. Please refresh and try again");
            }
        })
        .catch(() => {
            showAppNotification("warning", "Unable to generate file. Please try again!");
        });
}

function starRatings(rate) {
    switch (rate) {
        case 5:
            return '<span class="bx bx-star text-warning"></span> <span class="bx bx-star text-warning"></span> <span class="bx bx-star text-warning"></span> <span class="bx bx-star text-warning"></span> <span class="bx bx-star text-warning"></span>';
            break;
        case 4:
            return '<span class="bx bx-star text-warning"></span> <span class="bx bx-star text-warning"></span> <span class="bx bx-star text-warning"></span> <span class="bx bx-star text-warning"></span> <span class="bx bx-star"></span>';
            break;
        case 3:
            return '<span class="bx bx-star text-warning"></span> <span class="bx bx-star text-warning"></span> <span class="bx bx-star text-warning"></span> <span class="bx bx-star"></span> <span class="bx bx-star"></span>';
            break;
        case 2:
            return '<span class="bx bx-star text-warning"></span> <span class="bx bx-star text-warning"></span> <span class="bx bx-star"></span> <span class="bx bx-star"></span> <span class="bx bx-star"></span>';
            break;
        case 1:
            return '<span class="bx bx-star text-warning"></span> <span class="bx bx-star"></span> <span class="bx bx-star"></span> <span class="bx bx-star"></span> <span class="bx bx-star"></span>';
            break;
        default:
            return '<span class="bx bx-star"></span> <span class="bx bx-star"></span> <span class="bx bx-star"></span> <span class="bx bx-star"></span> <span class="bx bx-star"></span>';
    }
}

function loadNotifications() {
    $.ajax({
        type: "POST",
        async: true,
        credentials: "same-origin",
        headers: {
            "CSRF-Token": csrf_token,
        },
        url: "<%= base_url %>/user/get-notifications",
        data: "",
        success: function (data) {
            if (data.data === undefined) {
                return false;
            }
            var notes = data.data;
            if (notes.length > 0) {
                last_note = notes[0].note_id;
                for (var i = 0; i < notes.length; i++) {
                    var notification = notificationObjectMessage(notes[i]);
                    $("#note-inner").append(notification);
                }
            }
        },
    });
}

function notificationObjectMessage(notes) {
    var notification = '<a hyper-link="' + notes.hyper_link + '" note-id="' + notes.note_id + '" note-read="' + notes.note_read + '" href="javascript:void(0)" class="notification-item"> <div class="media"> <div class="avatar-xs mr-3"> <span class="avatar-title rounded-circle font-size-16 bg-' + notes.note_class + '"> <i class="' + notes.note_icon + '"></i> </span> </div> <div class="media-body">';
    if (notes.note_read) {
        notification += '<h6 class="note-header mt-0 mb-1 text-muted">';
    } else {
        notification += '<h6 class="note-header mt-0 mb-1 font-weight-bold text-primary">';
    }
    notification += notes.note_head + "</h6>";
    notification += '<div class="font-size-12 text-muted"> <p class="mb-1">' + notes.note_message + '</p> <p class="mb-0"><i class="bx bx-time"></i> <span class="notification-time" note-time="' + notes.note_time + '">' + timeDifference(new Date(notes.note_time)) + "</span></p> </div> </div> </div> </a>";
    return notification;
}

function refreshNotifications() {
    $.ajax({
        type: "POST",
        async: true,
        credentials: "same-origin",
        headers: {
            "CSRF-Token": csrf_token,
        },
        url: "<%= base_url %>/user/refresh-notifications",
        data: { last_note: last_note },
        success: function (data) {           
            if (data.data === undefined) {
                return false;
            }
            var notes = data.data;
            if (notes.length > 0) {
                last_note = notes[notes.length - 1].note_id;
                for (var i = 0; i < notes.length; i++) {
                    var notification = notificationObjectMessage(notes[i]);
                    $("#note-inner").prepend(notification);
                }
            }
            last_notification_fetch_time = new Date();
        },
    });
}

function floorToLabel(floor) {
    if (floor === 0) {
        return "Ground Floor";
    } else if (floor > 0) {
        var last_digit = floor.toString().charAt(floor.toString().length - 1);
        var res = "";
        switch (last_digit) {
            case "1":
                res = "st";
                break;
            case "2":
                res = "nd";
                break;
            case "3":
                res = "rd";
                break;
            case "0":
            case "4":
            case "5":
            case "6":
            case "7":
            case "8":
            case "9":
                res = "th";
                break;
            default:
                res = "";
        }
        return floor.toString() + res + " Floor";
    }
}

function deleteProperty(id) {
    sharpAlert({
        title: "Confirm?",
        text: "Are you sure you want to delete this property?",
        type: "warning",
        showCancelButton: true,
        confirmButtonText: "Yes",
        confirmButtonClass: "btn btn-success mr-2 btn-swal",
        cancelButtonText: "No",
        cancelButtonClass: "btn btn-danger mr-2 btn-swal",
       
        
    },(passed)=>{
        if (passed) {
            $.ajax({
                type: "POST",
                async: true,
                credentials: "same-origin",
                headers: { "CSRF-Token": csrf_token },
                url: "<%= base_url %>/admin/properties/delete",
                data: "id=" + id,
                success: function (data) {
                    if (data.Status == 200) {
                        showAppNotification("success", data.Message);
                        loadPage("<%= base_url %>/admin/properties", false);
                    } else {
                        showAppNotification("warning", data.Message);
                    }
                },
                error: function (err) {
                    showAppNotification( 'danger', 'Unable to complete your request. Please try again later!');
                },
            });
        }
    });
}

function formatMoney(number) {  
    var n = parseFloat(number) || 0;
    
return Number(n).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }); 
}

function clearPaymentFile(){
    $("#payment_receipt").val("");
	initializePaymentFile($("#payment_receipt"));
}


function initializePaymentFile(target) {
	if(target.files == null) {
		$("#btn_payment_remove_file").css("display", "none");
		$("#payment_file_display").html("");
		return;
	} else if(target.files.length == 0) {
		$("#payment_file_display").html("");
		$("#btn_payment_remove_file").css("visibility", "hidden");
		return;
	} else {
		$("#btn_payment_remove_file").css("visibility", "visible");
	}
	var file = target.files[0];
	if(file.type == "application/pdf") {
		var fileReader = new FileReader();
		fileReader.onload = function() {
			var pdfData = new Uint8Array(this.result);
			// Using DocumentInitParameters object to load binary data.
			var loadingTask = pdfjsLib.getDocument({
				data: pdfData,
			});
			loadingTask.promise.then(function(pdf) {
				// Fetch the first page
				var pageNumber = 1;
				pdf.getPage(pageNumber).then(function(page) {
					var scale = 1.5;
					var viewport = page.getViewport({
						scale: scale,
					});
					// Prepare canvas using PDF page dimensions
					$("#payment_file_display").html("<canvas class='lease-document border shadow custom-image-2' id='pdfViewer'></canvas>");
					var canvas = $("#pdfViewer")[0];
					var context = canvas.getContext("2d");
					canvas.height = viewport.height;
					canvas.width = viewport.width;
					// Render PDF page into canvas context
					var renderContext = {
						canvasContext: context,
						viewport: viewport,
					};
					var renderTask = page.render(renderContext);
					renderTask.promise.then(function() {});
				});
			}, function(reason) {
				// PDF loading error
			});
		};
		fileReader.readAsArrayBuffer(file);
	} else if(file.type == "image/png" || file.type == "image/jpg" || file.type == "image/jpeg") {
	
		$("#payment_file_display").html("<img class='lease-document border shadow custom-image-2' id='imgViewer'/>");
		document.getElementById("imgViewer").src = window.URL.createObjectURL(file);
	}
}


function timeDifference(previous) {
    var current = new Date();
    var msPerMinute = 60 * 1000;
    var msPerHour = msPerMinute * 60;
    var msPerDay = msPerHour * 24;
    var msPerMonth = msPerDay * 30;
    var msPerYear = msPerDay * 365;
    var elapsed = current - previous;
    if (elapsed < msPerMinute) {
        var s = Math.round(elapsed / 1000);
        if (s < 5) {
            return "just now";
        } else {
            return s + " seconds ago";
        }
    } else if (elapsed < msPerHour) {
        return Math.round(elapsed / msPerMinute) + " minutes ago";
    } else if (elapsed < msPerDay) {
        var h = Math.round(elapsed / msPerHour);
        if (h == 1) {
            return "an hour ago";
        } else {
            return h + " hours ago";
        }
    } else if (elapsed < msPerMonth) {
        return Math.round(elapsed / msPerDay) + " days ago";
    } else if (elapsed < msPerYear) {
        return Math.round(elapsed / msPerMonth) + " months ago";
    } else {
        return Math.round(elapsed / msPerYear) + " years ago";
    }
}

function makeBusy(id, busy=true) {
    if(busy){
        $(id).waitMe({
            effect: "facebook",
            text: "Please wait...",
            bg: "rgba(255,255,255,0.7)",
            color: "#ff6922",
            maxSize: "",
            waitTime: -1,
            textPos: "vertical",
            fontSize: "",
            source: "",
            onClose: function () {},
        });
    }else{
        $(id).waitMe("hide");
    }    
  }
  
function invoiceData(invoice_info){
      var part1 = '<div id="invoice"  class="container"> <div class="row"> <div class="col-12"> <div class="receipt-content"> <div class="container bootstrap snippets bootdey"> <div class="row"> <div class="col-md-12"> <div class="invoice-wrapper"> <div class="d-flex justify-content-between"> <div class="intro"> Hi <strong>' + invoice_info.first_name + ' ' + invoice_info.last_name + '</strong>, <br> This is the invoice for <strong>' + monthNames[invoice_info.bill_month-1] + ', ' + invoice_info.bill_year + '</strong></div> <div class="text-right"> <h1 class="text-success">INVOICE</h1><h5 class="text-warning">ROOM: ' + invoice_info.unit_name + '</h5> </div> </div> <div class="payment-info"> <div class="row"> <div class="col-6"> <span>INVOICE NO.</span> <strong>' + invoice_info.bill_code + '</strong> </div> <div class="col-6 text-right"> <p>Invoice Date: <span class="text-dark font-weight-bold">' + invoice_info.bill_date + '</span><p/><p>Due Date: <span class="text-dark font-weight-bold">' + invoice_info.due_date + '</span></p> </div> </div> </div> <div class="payment-details"> <div class="row"> <div class="col-sm-6"> <span>Tenant</span> <strong> ' + invoice_info.first_name + ' ' + invoice_info.last_name + ' </strong> <p>Tel: ' + invoice_info.phone_number + ' <br> Email: ' + invoice_info.email_address + '</p> </div> <div class="col-sm-6 text-right"> <span>Payment To</span> <strong> ' + invoice_info.property_name + ' </strong> <p> ' + invoice_info.property_address + '<br> Room/Unit#: <strong>' + invoice_info.unit_name + '</strong></p> </div> </div> </div> <div class="line-items"> <div class="table-responsive"> <table class="table table-sm"> <thead> <tr> <th class="pl-0 font-weight-bold text-muted text-uppercase">DESCRIPTION</th> <th class="text-right pr-0 font-weight-bold text-muted text-uppercase">AMOUNT</th> </tr> </thead> <tbody>';
            var bills = JSON.parse(invoice_info.bills_breakdown);
            for(var i = 0; i < bills.length; i++) {
              var row = '<tr><td>' + bills[i].bill_name + '</td><td class="text-right">' + formatMoney(bills[i].bill_amount) + '</td> </tr>';
              part1 += row;
            }
            part1 += '</tbody> </table> </div> </div> <div class="line-items"> <h6 class="text-muted text-center">Payments</h6>';
            var payments = JSON.parse(invoice_info.payments_breakdown);
            if(payments.length>0){
                part1 +=`<div class="table-responsive border mb-3"> <table class="table table-sm"> <thead> <tr class="text-muted"> <th>Date</th> <th>Mode</th> <th class="text-right">Amount</th><th class="ml-5">Reference</th> </tr> </thead> <tbody>`;
                for(var i = 0; i < payments.length; i++) {
                    var row = '<tr class="font-weight-boldest"><td>' + payments[i].payment_date + '</td><td>' + payments[i].payment_method + '</td><td class="pr-0 pt-7 text-right">' + formatMoney(payments[i].payment_amount) + '</td><td>' + payments[i].payment_ref + '</td></tr>';
                    part1 += row;
                }
                part1 += '</tbody> </table> </div> </div><div class="d-flex justify-content-between"> <div class="text-left"> <p class="extra-notes"> <strong>Payment Instructions</strong><br>';
            }else{
                part1 +=`<div class='alert alert-danger'>No payment found</div>`;
            }
            
            
               var methods = invoice_info.payment_methods;
               part1 +='<ol>';
              for(var i = 0; i < methods.length; i++) {
                var ind = parseInt(i + 1);
                part1 += '<li> <strong>' + methods[i].account_name + "(" + methods[i].account_no  + ")</strong> - " + methods[i].payment_instructions +"</li>";
              }
              part1 +='</ol>';
            part1 += ' </p> </div> <div class="total text-right"> <div class="field"> Total : <span>' + formatMoney(invoice_info.total_amount) + ' </span> </div> <div class="field"> Paid : <span>' + formatMoney(invoice_info.paid_amount) + ' </span> </div> <hr><h5 class="field grand-total"> Balance : <span>' + formatMoney(invoice_info.total_amount - invoice_info.paid_amount) + ' </span> </h5> </div> </div> </div> </div> </div> </div> </div> </div> </div> </div> </div>';
            return part1;
    }
  
function getSmsUnitsBalance() {
        $.ajax({
            type: "POST",
            async: true,
            credentials: "same-origin",
            headers: {
                "CSRF-Token": csrf_token,
            },
            url: "<%= base_url %>/user/profile?section=get-sms-balances",
            data: "",
            success: function (data) {
                if (data.Status == 200) {
                    $("#available-sms-units").html(data.Message);
                }
            },
        });
    }

function getPendingTerminations() {
    $.ajax({
          type: "POST",
        async: true, 
          credentials: 'same-origin',
          headers: {
            'CSRF-Token': csrf_token
          },
         url: "<%= base_url %>/admin/terminations?action=get-upcoming-count",
          data: "",
          success: function(data) {             
            if (data.Status == 200) {
                if(data.Message>0){
                        var label = data.Message.toString()
                    if(data.Message>10){            
                        label = "10+";
                    }
                    $("#lnk_upcoming_terminations").html(' <span class="badge badge-pill badge-danger float-right">'+label +'</span> <span class="menu-text">Terminations</span>')
                }else{
                    $("#lnk_upcoming_terminations").html('<span class="menu-text">Terminations</span>');
                }
               
           
            }
          },
          error: function(err) {
            //showAppNotification("danger", "An error occured! Please try again later");
          },
        });
}

</script>
